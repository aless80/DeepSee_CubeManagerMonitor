<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (SUSE Linux Enterprise Server for x86-64) 2017.2.1 (Build 801)" ts="2018-08-10 16:13:18">
<Class name="CubeManager.CubeManagerPortlet">
<Super>%DeepSee.Component.Portlet.abstractPortlet</Super>
<TimeChanged>64870,58389.656672</TimeChanged>
<TimeCreated>64862,58518.798486</TimeCreated>

<Parameter name="INCLUDEFILES">
<Description>
Parameter INCLUDEFILES = "script:https://www.amcharts.com/lib/3/themes/light.js,script:https://www.amcharts.com/lib/3/amcharts.js,script:https://www.amcharts.com/lib/3/serial.js,script:https://www.amcharts.com/lib/3/plugins/export/export.min.js,script:https://www.amcharts.com/lib/3/plugins/export/export.js";</Description>
<Default>https://www.amcharts.com/lib/3/amcharts.js,https://www.amcharts.com/lib/3/serial.js,https://d3js.org/d3.v3.min.js,https://www.amcharts.com/lib/3/plugins/export/export.js,https://www.amcharts.com/lib/3/plugins/export/export.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Default>zenCSLM.js,DeepSee.js,https://www.amcharts.com/lib/3/plugins/export/export.js</Default>
</Parameter>

<Property name="chartheight">
<Description>
Chart height (percentage of widget)</Description>
<Type>%Integer</Type>
</Property>

<Property name="chartwidth">
<Description>
Chart width (percentage of widget)</Description>
<Type>%Integer</Type>
</Property>

<Property name="fillalphas">
<Description>
Area Transparency Setting</Description>
<Type>%Numeric</Type>
</Property>

<Property name="linecolors">
<Description>
Line color
Property linecolor1 As %String;
Comma separated and case insensitive string of line colors for graphs</Description>
<Type>%String</Type>
</Property>

<Property name="fillcolors">
<Description>
Chart color for first graph
Comma separated string of fill colors for graphs</Description>
<Type>%String</Type>
</Property>

<Property name="bullet">
<Description>
Bullet shape</Description>
<Type>%String</Type>
</Property>

<Property name="bulletsize">
<Description>
Bullet size</Description>
<Type>%Integer</Type>
</Property>

<Property name="showLegend">
<Description>
Bullet size</Description>
<Type>%Boolean</Type>
</Property>

<Property name="amchartsexport">
<Description>
Enable Export of chart</Description>
<Type>%Boolean</Type>
</Property>

<Property name="reqFilters">
<Description>
Comma separated string of required filters, e.g. "[AgeD].[H1].[Age],Gender"</Description>
<Type>%String</Type>
</Property>

<Method name="%OnGetPortletName">
<Description>
Return the localized caption of this portlet.
This is displayed in the Widget Builder dialog.
This should be overridden in subclasses.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "CubeManager.CubeManagerPortlet"
]]></Implementation>
</Method>

<Method name="%OnGetPortletSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[*pInfo:%List,&pSettings]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Kill pInfo
 Set pInfo($I(pInfo)) = $LB("CHARTHEIGHT","100","%Integer","% Chart height","Chart height (percentage of widget)")
 Set pInfo($I(pInfo)) = $LB("CHARTWIDTH","100","%Integer","% Chart width","Chart width (percentage of widget)")
 Set pInfo($I(pInfo)) = $LB("FILLALPHAS","0.5","%Numeric","Area Transparency","Set the transparency of the area plot [0 to 1]")
 Set pInfo($I(pInfo)) = $LB("LINECOLORS","red,green,yellow,blue,orange,purple,cyan,magenta,black,lime,teal,lavender,pink,brown,maroon,navy,grey","%String","Line Colors","Comma separated string of colors")
 Set pInfo($I(pInfo)) = $LB("FILLCOLORS","red,green,yellow,blue,orange,purple,cyan,magenta,black,lime,teal,lavender,pink,brown,maroon,navy,grey","%String","Fill Colors","Comma separated string of colors")
 Set pInfo($I(pInfo)) = $LB("BULLET","bubble","DRILL^none:none,round:round,square:square,triangleUp:triangleUp,triangleDown:triangleDown,bubble:bubble","Bullet","Bullet shape")
 Set pInfo($I(pInfo)) = $LB("BULLETSIZE","6","%Integer","Bullet size","Size of bullet in the chart")
 Set pInfo($I(pInfo)) = $LB("SHOWLEGEND","true","ENUM^true:1,false:0","Show Legend","Show legend")
 Set pInfo($I(pInfo)) = $LB("AMEXPORT","false","ENUM^true:1,false:0","Enable Export","Enable Export")
 Set pInfo($I(pInfo)) = $LB("REQUIREDFILTERS","","%String","Required filters","Comma separated string of MDX filters")
 Quit pInfo
]]></Implementation>
</Method>

<Method name="onApplyFilters">
<Description>
When filters get applied to the portlet, re-query the data from the pivot with the appropriate new filters in place.</Description>
<FormalSpec>refresh,widget</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('onApplyFilters')
	var portlet = widget.findComponent('portlet');
   	this.renderContents(widget,portlet);
]]></Implementation>
</Method>

<Method name="%DrawHTML">
<Implementation><![CDATA[
  //In a portlet that accesses data do nothing but force a modification of the renderFlag property
  Set ..renderFlag = ..renderFlag + 1
  //Settings: they will be available in renderContent (and drawChart) as e.g. this.fillalphas
  Set ..fillalphas = ..settings("FILLALPHAS")
  Set ..chartheight = ..settings("CHARTHEIGHT")
  Set ..chartwidth = ..settings("CHARTWIDTH")
  Set ..linecolors = ..settings("LINECOLORS")
  Set ..fillcolors = ..settings("FILLCOLORS")
  Set ..bullet = ..settings("BULLET")
  Set ..bulletsize = ..settings("BULLETSIZE")
  Set ..showLegend = ..settings("SHOWLEGEND")
  Set ..amchartsexport = ..settings("AMEXPORT")
  Set ..reqFilters = ..settings("REQUIREDFILTERS")
  //Show a message while loading
  &html< <div id="chartdiv">Content is loading...</div>	>
]]></Implementation>
</Method>

<Method name="renderContents">
<FormalSpec>widget,portlet</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('renderContents')
	//Get the widget and portlet objects
	var widgetIdArray = this.id.split("/")
	var widgetId = widgetIdArray[0]
	if (!widget) {
		widget = zen(widgetId);
	}
	if (!portlet) {
		portlet = widget.findComponent('portlet');
	}
	//Quit if the portlet object was not found. This happens during the initial server load
	//when renderContents gets called before it is time to load the data
	if (!portlet) {
		this.getEnclosingDiv().innerHTML = "";
		return true;
	}
	var portletId = portlet.id
    //Get the widget's data controller to get to the source data in the pivot
    var controller = this.getController();
    if (null == controller) {
        this.connectToController();
        controller = this.getController();
    }
	//Get the chartdiv div created in %DrawHTML
	var chartdiv = document.getElementById('chartdiv');
	chartdiv.style.width = this.chartwidth+'%';
    chartdiv.style.height = this.chartheight+'%';
    chartdiv.style.visibility = 'visible'
	//Get the query
	var query = controller.GetCurrentQueryText();
	console.log('The MDX query is:\n'+query)
	//Check if the required filters given in the widget settings are set
	var filters = controller.getFilterForCells();
	var reqFilterArr = this.reqFilters.toUpperCase().split(','); 
	for (i = 0; i < reqFilterArr.length; i++) {
		if (filters.indexOf(reqFilterArr[i]) == -1) {
			chartdiv.innerHTML = '<br><b>Please select a filter for: ' + this.reqFilters.replace(',',' and ') + ' </b>';
			window.controller = controller;
			return;
		}
	}
    //Get the data from the controller..
    var chartData = []
    var columnLabels = controller.getColumnDescriptors().map(function(a) {return a.caption;});
 	var ncols = columnLabels.length;
    var data = controller.getDataAsArrays()
	if (Array.isArray(data) && data.length) {
    	for (var i = 0; i < data[0].length; ++i) {
	    	var obj = {date: controller.getLabel(i,1)};
	    	for (var j = 0; j < ncols; ++j) {
	    		obj[columnLabels[j]] = data[j][i];
		 	}
		 	chartData.push(obj);
    	};  
	 	console.log(chartData)
	}
	// ..and pass it to amcharts
	this.drawChart(controller, chartData)
    //Debugging help: 
    //Make the controller and chartData variables available in the console
	window.controller = controller;
	window.chartData = chartData;
]]></Implementation>
</Method>

<Method name="drawChart">
<Description>
NB it is assumed that dates are in the format yyyy-mm-dd hh:mm:ss and that they are sorted chronologically</Description>
<FormalSpec>controller,chartData</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('drawChart')	
	//Get the column label from DeepSee
	var columnLabels = controller.getColumnDescriptors().map(function(a) {return a.caption;});
	var ncols = columnLabels.length;
	// AmChart code
	if (typeof AmCharts=="undefined")  {
		alert('Please download amCharts JavaScript Charts (http://www.amcharts.com/download/) and place the "amcharts" directory in /csp/broker/  ');
		return;
	}
	//Set the minimum date to midnight of the first day in the data
	var minimumDate = 0;
	if (Array.isArray(chartData) && chartData.length) {
		minimumDate = chartData[0].date.slice(0,11)+'00:00:00';
		//Create json with graphs and legend
		var graphArray = [];
		for (var j = 0; j < ncols; ++j) {
	    	graphArray.push({
		    	"id": "g"+j,
				"lineThickness": 2,
				"bullet": this.bullet,
				"bulletSize": this.bulletsize,
				//"lineColor": this.linecolor1, //use color instead
				//"fillColors": this.fillcolor1,//use color instead
				"fillAlphas": this.fillalphas,
				"valueField": columnLabels[j],
				"title": columnLabels[j],
				"balloonText": "<div style='margin:5px; font-size:19px;'>"+columnLabels[j]+": <b>[[value]]</b></div>"
			});
		};
	}
	var chart = AmCharts.makeChart("chartdiv", {
		"type": "serial",
		"theme": "light",
		"marginRight": 80,
		"dataProvider": chartData,
		"colors": this.linecolors.split(','),		
		"valueAxes": [{
			"position": "left",
			"title": columnLabels,
			"minimum":minimumDate,
			"maximum":"undefined",
			"showFirstLabel": true,
			"autoGridCount": true,
			"labelFrequency": 2
		}],
		"graphs": graphArray,
		"legend": {
			"enabled": this.showLegend,
			"useGraphSettings": true,    		
  		},
		"chartScrollbar": {
			"graph": "g1",
			"scrollbarHeight": 30,
			"backgroundAlpha": 0,
			"selectedBackgroundAlpha": 0.1,
			"selectedBackgroundColor": "#888888", //Gray background
			"graphFillAlpha": 0,
			"graphLineAlpha": 0.5,
			"selectedGraphFillAlpha": 0,
			"selectedGraphLineAlpha": 1,
			"autoGridCount": true,
			"color": "#AAAAAA"
		},
		"chartCursor": {
			"categoryBalloonDateFormat": "JJ:NN, DD MMMM", //Hours:Minute, Day Month
			"cursorPosition": "mouse"
		},
		"categoryField": "date",
		"categoryAxis": {
			"minPeriod": "hh",
			"parseDates": true,
			"showFirstLabel": false
		},
		"export": {
			"enabled": this.amchartsexport,
			"dateFormat": "YYYY-MM-DD HH:NN:SS"
		}
	});
	//Show message if no data
	if (chart.dataProvider === undefined || chart.dataProvider.length === 0) {
		chart.addLabel("50%", "50%", "The chart contains no data", "middle", 15);
	}
]]></Implementation>
</Method>

<Method name="%OnGetPortletIcon">
<Description>
URL of the icon for this portlet displayed in the Widget Builder dialog.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "https://avatars1.githubusercontent.com/u/6652854?s=460&v=4"
]]></Implementation>
</Method>
</Class>
</Export>
